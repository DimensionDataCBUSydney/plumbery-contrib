---

information:
  - "MySQL replication across two data centres"

parameters:

  primaryId:
    information:
      - "the primary data centre for this deployment"
    type: locations.list
    default: AU10

  secondaryId:
    information:
      - "the secondary data centre for this deployment"
    type: locations.list
    default: AU11

  domainName:
    information:
      - "the name of the network domain to be deployed"
    type: str
    default: SqlMasterSlaveFox

  networkName:
    information:
      - "the name of the Ethernet VLAN to be deployed"
    type: str
    default: SqlMasterSlaveNetwork

links:
  documentation: https://plumbery.readthedocs.org/en/latest/tutorial.sql.master.slave.html

defaults:

  cloud-config:

    ssh_keys:
      rsa_private: |
        {{ key.rsa_private }}
      rsa_public: "{{ key.rsa_public }}"

    users:
      - default

      - name: ubuntu
        sudo: 'ALL=(ALL) NOPASSWD:ALL'
        ssh-authorized-keys:
          - "{{ key.rsa_public }}"
          - "{{ local.rsa_public }}"

<<<<<<< HEAD:fittings/database/mysql/fitting.yaml
      # configure SSH keys for the account root
      #
      - name: root
        ssh-authorized-keys:
          - "{{ key.rsa_public }}"
          - "{{ local.rsa_public }}"

    # plumbery uses the account root to prepare nodes
    #
    disable_root: false

    # plumbery can use ssh certificate to avoid passwords
    #
=======
    disable_root: true
>>>>>>> 807fb3f59a5df1db522e1b26b4c565688fd118dd:fittings/database/mysql-master-slave/fittings.yaml
    ssh_pwauth: false

---

locationId: {{Â primaryId.parameter }}

blueprints:

  # the blueprint 'sql' is spread over two different locations: @AU10 and @AU11
  #
  - sql:

      # reservation of 2 public ipv4 addresses to be given to nodes afterwards
      #
      domain:
        name: {{ domainName.parameter }}
        description: "SQL replication"
        ipv4: 2

      # firewall is configured to accept ipv6 traffic from the slave
      #
      ethernet:
        name: {{ networkName.parameter }}
        subnet: 10.0.0.0
        accept:
          - {{ secondaryId.parameter }}::{{ networkName.parameter }}

      nodes:
        - masterSQL:

            # plumbery turns hashtags to groups in the inventory
            #
            description: "#master #database #sql server #ubuntu"

            # instructions to be displayed to end user
            #
            information:
              - "this is the SQL Master server"
              - "check replication with:"
              - "$ ssh ubuntu@{{ masterSQL.public }}"
              - "$ mysql"
              - "> show master status\\G"
              - "check data with:"
              - "> use db01;"
              - "> select * from persons;"
              - "create a record with:"
              - "> insert into persons (name) values ('<some name here>');"
              - "check change in GTID:"
              - "> show master status\\G"

            # you could use 'CentOS' or other label from CloudControl library
            #
            appliance: 'Ubuntu 14'

            # computing power
            #
            cpu: 8
            memory: 32

            disks:
              - 1 50 standard

            # add NAT to the internet and open firewall for ssh
            #
            glue:
              - internet 22

            # add the node to the monitoring dashboard
            #
            monitoring: essentials

            # plumbery provides following these directives to cloud-init
            #
            cloud-config:

              # change the hostname to our definition
              #
              hostname: "{{ node.name }}"

              # provide a random password to mysql server -- this is remembered of course
              #
              bootcmd:
                - echo "mysql-server mysql-server/root_password password {{ mysql_root.secret }}" | sudo debconf-set-selections
                - echo "mysql-server mysql-server/root_password_again password {{ mysql_root.secret }}" | sudo debconf-set-selections

              # install packages -- here, time synchronization and mysql
              #
              packages:
                - ntp
                - mysql-server-5.6

              # write various files
              #
              write_files:

                # a script in awk to update the /etc/hosts file
                #
                - path: /root/hosts.awk
                  content: |
                    #!/usr/bin/awk -f
                    /^{{ masterSQL.private }}/ {next}
                    /^{{ masterSQL.ipv6 }}/ {next}
                    /^{{ {{ secondaryId.parameter }}::slaveSQL.ipv6 }}/ {next}
                    {print}
                    END {
                     print "{{ masterSQL.private }}    masterSQL"
                     print "{{ masterSQL.ipv6 }}    masterSQL"
                     print "{{ {{ secondaryId.parameter }}::slaveSQL.ipv6 }}    slaveSQL"
                    }

                # a script in sed to change the configuration of mysql
                #
                - path: /root/my.cnf.sed
                  content: |
                    #!/usr/bin/sed
                    /bind-address/s/127.0.0.1/::/
                    s/#server-id/server-id/
                    /server-id/s/= 1/= 123/
                    s/#log_bin.*/log-bin = mysql-bin/
                    /max_binlog_size/a log-slave-updates\nbinlog_format = MIXED\nenforce-gtid-consistency\ngtid-mode = ON
                    /enforce-gtid-consistency/s/^#//
                    /gtid-mode/s/^#//
                    $!N; /^\(.*\)\n\1$/!P; D

                # SQL directives to configure replication on master
                #
                - path: /root/master_setup.sql
                  content: |
                    GRANT REPLICATION SLAVE ON *.*
                      TO 'replicator'@'slaveSQL'
                      IDENTIFIED BY '{{ replicator.secret }}';
                    FLUSH PRIVILEGES;
                    FLUSH TABLES WITH READ LOCK;

                # SQL directives to create some content in the database
                #
                - path: /root/master_db.sql
                  content: |
                    CREATE DATABASE db01;
                    USE db01;
                    CREATE USER 'dbuser'@'localhost' IDENTIFIED BY '{{ dbuser.secret }}';
                    GRANT ALL PRIVILEGES ON db01.* TO 'dbuser'@'localhost';
                    CREATE TABLE persons (id INT AUTO_INCREMENT,
                      name VARCHAR(30),
                      datum TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      PRIMARY KEY(id));
                    INSERT INTO persons(name) VALUES ('Marko');
                    INSERT INTO persons(name) VALUES ('John');
                    INSERT INTO persons(name) VALUES ('Eric');
                    INSERT INTO persons(name) VALUES ('Clive');
                    INSERT INTO persons(name) VALUES ('Maria');

                # allow the ubuntu account to handle the database easily
                #
                - path: /home/ubuntu/.my.cnf
                  permissions: '0400'
                  content: |
                    [client]
                    user=root
                    password={{ mysql_root.secret }}

              # commands executed as root
              #
              runcmd:

                - echo "===== Growing LVM with added disk"
                - pvcreate /dev/sdb
                - vgextend rootvol00 /dev/sdb
                - lvextend -l +100%FREE /dev/mapper/rootvol00-rootlvol00
                - resize2fs /dev/mapper/rootvol00-rootlvol00

                - echo "===== Handling ubuntu identity"
                - cp -n /etc/ssh/ssh_host_rsa_key /home/ubuntu/.ssh/id_rsa
                - cp -n /etc/ssh/ssh_host_rsa_key.pub /home/ubuntu/.ssh/id_rsa.pub
                - chown ubuntu:ubuntu /home/ubuntu/.ssh/*
                - sed -i "/StrictHostKeyChecking/s/^.*$/    StrictHostKeyChecking no/" /etc/ssh/ssh_config

                - echo "===== Updating /etc/hosts"
                - cp -n /etc/hosts /etc/hosts.original
                - awk -f /root/hosts.awk /etc/hosts >/etc/hosts.new && mv /etc/hosts.new /etc/hosts

                - echo "===== Configuring SQL engine"
                - cp -n /etc/mysql/my.cnf /etc/mysql/my.cnf.original
                - sed -i -f /root/my.cnf.sed /etc/mysql/my.cnf
                - /etc/init.d/mysql restart
                - mysql -e "source /root/master_setup.sql" -u root -p{{ mysql_root.secret }}
                - chown ubuntu:ubuntu /home/ubuntu/.my.cnf

                - echo "===== Populating SQL database"
                - mysql -e "source /root/master_db.sql" -u root -p{{ mysql_root.secret }}

                - echo "===== Sharing SQL dump"
                - mkdir /var/rsync
                - mysqldump --lock-all-tables --all-databases  -u root -p{{ mysql_root.secret }} > /var/rsync/all-databases.sql
                - sed -i "1i RESET MASTER;" /var/rsync/all-databases.sql
                - chown -R ubuntu:ubuntu /var/rsync


---

locationId: {{ secondaryId.parameter }}

blueprints:

  - sql:

      # reservation of 2 public ipv4 addresses to be given to nodes afterwards
      #
      domain:
        name: {{ domainName.parameter }}
        description: "SQL replication"
        ipv4: 2

      # firewall is configured to accept ipv6 traffic from the master
      #
      ethernet:
        name: {{ networkName.parameter }}
        subnet: 10.0.0.0
        accept:
          - {{ primaryId.parameter }}::{{ networkname.parameter }}

      nodes:
        - slaveSQL:

            # plumbery turns hashtags to groups in the inventory
            #
            description: "#slave #database #sql server #ubuntu"

            # instructions to be displayed to end user
            #
            information:
              - "this is a SQL Slave server"
              - "check replication with:"
              - "$ ssh ubuntu@{{ slaveSQL.public }}"
              - "$ mysql"
              - "> show slave status\\G"
              - "check data with:"
              - "> use db01;"
              - "> select * from persons;"

            # you could use 'CentOS' or other label from CloudControl library
            #
            appliance: 'Ubuntu 14'

            # computing power
            #
            cpu: 8
            memory: 32

            disks:
              - 1 50 standard

            # add NAT to the internet and open firewall for ssh
            #
            glue:
              - internet 22

            # add the node to the monitoring dashboard
            #
            monitoring: essentials

            # plumbery provides following these directives to cloud-init
            #
            cloud-config:

              # change the hostname to our definition
              #
              hostname: "{{ node.name }}"

              # provide a random password to mysql server
              #
              bootcmd:
                - echo "mysql-server mysql-server/root_password password {{ mysql_root.secret }}" | sudo debconf-set-selections
                - echo "mysql-server mysql-server/root_password_again password {{ mysql_root.secret }}" | sudo debconf-set-selections

              # install packages -- here, time synchronization and mysql
              #
              packages:
                - ntp
                - mysql-server-5.6

              # write various files
              #
              write_files:

                # a script in awk to update the /etc/hosts file
                #
                - path: /root/hosts.awk
                  content: |
                    #!/usr/bin/awk -f
                    /^{{ slaveSQL.private }}/ {next}
                    /^{{ slaveSQL.ipv6 }}/ {next}
                    /^{{ {{ primaryId.parameter }}::masterSQL.ipv6 }}/ {next}
                    {print}
                    END {
                     print "{{ slaveSQL.private }}    slaveSQL"
                     print "{{ slaveSQL.ipv6 }}    slaveSQL"
                     print "{{ {{ primaryId.parameter }}::masterSQL.ipv6 }}    masterSQL"
                    }

                # a script in sed to change the configuration of mysql
                #
                - path: /root/my.cnf.sed
                  content: |
                    #!/usr/bin/sed
                    /bind-address/s/127.0.0.1/::/
                    s/#server-id/server-id/
                    /server-id/s/= 1/= 456/
                    /server-id/a read-only = ON
                    s/#log_bin.*/log-bin = mysql-bin/
                    /max_binlog_size/a log-slave-updates\nbinlog_format = MIXED\nenforce-gtid-consistency\ngtid-mode = ON\nrelay-log = relay-log-slave
                    /enforce-gtid-consistency/s/^#//
                    /gtid-mode/s/^#//
                    $!N; /^\(.*\)\n\1$/!P; D

                # SQL directives to configure replication on slave
                #
                - path: /root/slave_setup.sql
                  content: |
                    STOP SLAVE;
                    CHANGE MASTER TO
                      MASTER_HOST='masterSQL',
                      MASTER_USER='replicator',
                      MASTER_PASSWORD='{{ replicator.secret }}',
                      MASTER_AUTO_POSITION = 1;
                    START SLAVE;

                # allow the ubuntu account to handle the database easily
                #
                - path: /home/ubuntu/.my.cnf
                  permissions: '0400'
                  content: |
                    [client]
                    user=root
                    password={{ mysql_root.secret }}

              # commands executed as root
              #
              runcmd:

                - echo "===== Growing LVM with added disk"
                - pvcreate /dev/sdb
                - vgextend rootvol00 /dev/sdb
                - lvextend -l +100%FREE /dev/mapper/rootvol00-rootlvol00
                - resize2fs /dev/mapper/rootvol00-rootlvol00

                - echo "===== Handling ubuntu identity"
                - cp -n /etc/ssh/ssh_host_rsa_key /home/ubuntu/.ssh/id_rsa
                - cp -n /etc/ssh/ssh_host_rsa_key.pub /home/ubuntu/.ssh/id_rsa.pub
                - chown ubuntu:ubuntu /home/ubuntu/.ssh/*
                - sed -i "/StrictHostKeyChecking/s/^.*$/    StrictHostKeyChecking no/" /etc/ssh/ssh_config

                - echo "===== Updating /etc/hosts"
                - cp -n /etc/hosts /etc/hosts.original
                - awk -f /root/hosts.awk /etc/hosts >/etc/hosts.new && mv /etc/hosts.new /etc/hosts

                - echo "===== Configuring SQL engine"
                - cp -n /etc/mysql/my.cnf /etc/mysql/my.cnf.original
                - sed -i -f /root/my.cnf.sed /etc/mysql/my.cnf
                - /etc/init.d/mysql restart
                - chown ubuntu:ubuntu /home/ubuntu/.my.cnf

                - echo "===== Being patient with master server"
                - sleep 1m

                - echo "===== Getting and loading SQL dump"
                - rsync -zhave "ssh -i /home/ubuntu/.ssh/id_rsa" ubuntu@masterSQL:/var/rsync/all-databases.sql /tmp/all-databases.sql
                - mysql -e "source /tmp/all-databases.sql" -u root -p{{ mysql_root.secret }}

                - echo "===== Starting SQL replication"
                - mysql -e "source /root/slave_setup.sql" -u root -p{{ mysql_root.secret }}

