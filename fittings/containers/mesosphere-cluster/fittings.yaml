---

information: |
  Mesosphere cluster, with 3 masters and 9 slaves
  A job submitted to Marathon is dispatched among slaves.

parameters:

  locationId:
    information:
      - "the target data centre for this deployment"
    type: locations.list
    default: AU10

  domainName:
    information:
      - "the name of the network domain to be deployed"
    type: str
    default: MesosphereClusterFox

  networkName:
    information:
      - "the name of the Ethernet VLAN to be deployed"
    type: str
    default: MesosphereClusterNetwork

links:
  documentation: https://github.com/DimensionDataCBUSydney/plumbery-contrib/tree/master/fittings/containers/mesosphere-cluster
  credit: https://open.mesosphere.com/getting-started/install/

defaults:

  # nodes are deployed in a single network domain
  domain:
    name: "{{ domainName.parameter }}"
    ipv4: auto

  # nodes are deployed on a single VLAN
  ethernet:
    name: "{{ networkName.parameter }}"
    subnet: 10.0.0.0

  # settings for any Mesos master node
  mesosphere-master:

    information:
      - "a Mesosphere master node"
      - "connect remotely with:"
      - "$ ssh ubuntu@{{ node.public }}"
      - "check Mesos interface at http://{{ node.public }}:5050/"
      - "check Marathon interface at http://{{ node.public }}:8080/"

    appliance: 'Ubuntu 14'
    cpu: 8
    memory: 32

    # :5050 is the Mesos web UI, :8080 is the Marathon web UI
    glue:
      - internet 22 5050 8080

    monitoring: essentials

    cloud-config:

      runcmd:

        - echo "===== Installing Mesosphere"

        - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E56151BF
        - DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
        - CODENAME=$(lsb_release -cs)
        - echo "deb http://repos.mesosphere.io/${DISTRO} ${CODENAME} main" | sudo tee /etc/apt/sources.list.d/mesosphere.list
        - apt-get -y update

        - apt-get -y install mesosphere

        - echo "===== Configuring Zookeeper"
        - cp -n /etc/zookeeper/conf_example/* /etc/zookeeper/conf
        - sed -i "s/#server.1=zookeeper1/server.1={{ master1.private }}/" /etc/zookeeper/conf/zoo.cfg
        - sed -i "s/#server.2=zookeeper2/server.2={{ master2.private }}/" /etc/zookeeper/conf/zoo.cfg
        - sed -i "s/#server.3=zookeeper3/server.3={{ master3.private }}/" /etc/zookeeper/conf/zoo.cfg

        - echo "===== Starting Zookeeper"
        - service zookeeper restart

        - echo "===== Configuring Mesos "

        - mkdir -p /etc/mesos-master
        - echo "{{ node.private }}" | sudo tee /etc/mesos-master/ip

        # allow web redirection to leading master over public Internet
        - echo "{{ node.public }}" | sudo tee /etc/mesos-master/hostname

        - echo "2" | sudo tee /etc/mesos-master/quorum

        # support docker containers as well
        - echo "docker,mesos" | sudo tee /etc/mesos-master/containerizers

        # afford long delays to pull a docker image
        - echo "5mins" | sudo tee /etc/mesos-master/executor_registration_timeout

        - mkdir -p /etc/mesos
        - sed -i "s/localhost:2181/{{ master1.private }}:2181,{{ master2.private }}:2181,{{ master3.private }}:2181/" /etc/mesos/zk

        - echo "===== Disabling Mesos slave service"
        - service mesos-slave stop
        - echo "manual" | sudo tee /etc/init/mesos-slave.override

        - echo "===== Starting Mesos"
        - service mesos-master restart

        - echo "===== Configuring Marathon"
        - mkdir -p /etc/marathon/conf
        - cp /etc/mesos-master/hostname /etc/marathon/conf
        - cp /etc/mesos/zk /etc/marathon/conf/master
        - echo "zk://{{ master1.private }}:2181,{{ master2.private }}:2181,{{ master3.private }}:2181/marathon" | sudo tee /etc/marathon/conf/zk

        - echo "===== Starting Marathon"
        - service marathon restart

  mesosphere-slave:

    appliance: 'Ubuntu 14'
    cpu: 8
    memory: 32

    disks:
      - 1 500 standard

    glue:
      - internet 22

    monitoring: essentials

    cloud-config:

      runcmd:

        - echo "===== Growing LVM with added disk"
        - pvcreate /dev/sdb
        - vgextend rootvol00 /dev/sdb
        - lvextend -l +100%FREE /dev/mapper/rootvol00-rootlvol00
        - resize2fs /dev/mapper/rootvol00-rootlvol00

        - echo "===== Installing Mesos"

        - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E56151BF
        - DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
        - CODENAME=$(lsb_release -cs)
        - echo "deb http://repos.mesosphere.io/${DISTRO} ${CODENAME} main" | sudo tee /etc/apt/sources.list.d/mesosphere.list
        - apt-get -y update

        - apt-get -y install mesos

        - echo "===== Configuring Mesos"

        - mkdir -p /etc/mesos-slave
        - echo "{{ node.private }}" | sudo tee /etc/mesos-slave/ip
        - echo "{{ node.name }}" | sudo tee /etc/mesos-slave/hostname

        # support docker containers as well
        - echo "docker,mesos" | sudo tee /etc/mesos-slave/containerizers

        # afford long delays to pull a docker image
        - echo "5mins" | sudo tee /etc/mesos-slave/executor_registration_timeout

        - mkdir -p /etc/mesos
        - sed -i "s/localhost:2181/{{ master1.private }}:2181,{{ master2.private }}:2181,{{ master3.private }}:2181/" /etc/mesos/zk

        - echo "===== Disabling Zookeeper"
        - service zookeeper stop
        - echo "manual" | sudo tee /etc/init/zookeeper.override

        - echo "===== Disabling Mesos master service"
        - service mesos-master stop
        - echo "manual" | sudo tee /etc/init/mesos-master.override

        - echo "===== Starting Mesos"
        - service mesos-slave restart

  # a couple of directives for all nodes
  cloud-config:

    hostname: "{{ node.name }}"

    write_files:

      - path: /root/hosts.awk
        content: |
          #!/usr/bin/awk -f
          /^{{ master1.private }}/ {next}
          /^{{ master2.private }}/ {next}
          /^{{ master3.private }}/ {next}
          /^{{ slave1.private }}/ {next}
          /^{{ slave2.private }}/ {next}
          /^{{ slave3.private }}/ {next}
          /^{{ slave4.private }}/ {next}
          /^{{ slave5.private }}/ {next}
          /^{{ slave6.private }}/ {next}
          /^{{ slave7.private }}/ {next}
          /^{{ slave8.private }}/ {next}
          /^{{ slave9.private }}/ {next}
          {print}
          END {
           print "{{ master1.private }}    master1"
           print "{{ master2.private }}    master2"
           print "{{ master3.private }}    master3"
           print "{{ slave1.private }}    slave1"
           print "{{ slave2.private }}    slave2"
           print "{{ slave3.private }}    slave3"
           print "{{ slave4.private }}    slave4"
           print "{{ slave5.private }}    slave5"
           print "{{ slave6.private }}    slave6"
           print "{{ slave7.private }}    slave7"
           print "{{ slave8.private }}    slave8"
           print "{{ slave9.private }}    slave9"
          }

    bootcmd:

      # remove apache
      - apt-get remove apache2 -y
      - apt-get autoremove -y

      # automate acceptance of oracle licence
      - echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | sudo debconf-set-selections
      - echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 seen true" | sudo debconf-set-selections

    apt_sources:
      - source: "ppa:webupd8team/java"

    packages:
      - ntp
      - oracle-java8-installer

    runcmd:

      - echo "===== Handling ubuntu identity"
      - cp -n /etc/ssh/ssh_host_rsa_key /home/ubuntu/.ssh/id_rsa
      - cp -n /etc/ssh/ssh_host_rsa_key.pub /home/ubuntu/.ssh/id_rsa.pub
      - chown ubuntu:ubuntu /home/ubuntu/.ssh/*
      - sed -i "/StrictHostKeyChecking/s/^.*$/    StrictHostKeyChecking no/" /etc/ssh/ssh_config

      - echo "===== Updating /etc/hosts"
      - cp -n /etc/hosts /etc/hosts.original
      - awk -f /root/hosts.awk /etc/hosts >/etc/hosts.new && mv /etc/hosts.new /etc/hosts

      - echo "===== Installing Docker Engine"
      - curl -sSL https://get.docker.com/ | sh
      - usermod -aG docker ubuntu

    ssh_keys:
      rsa_private: |
        {{ key.rsa_private }}
      rsa_public: "{{ key.rsa_public }}"

    users:
      - default

      - name: ubuntu
        sudo: 'ALL=(ALL) NOPASSWD:ALL'
        ssh-authorized-keys:
          - "{{ key.rsa_public }}"
          - "{{ local.rsa_public }}"

    disable_root: true
    ssh_pwauth: false

---

locationId: "{{ locationId.parameter }}"

blueprints:

  - masters:

      nodes:

        - master1:
            default: mesosphere-master

            cloud-config:

              write_files:

                - path: /etc/zookeeper/conf/myid
                  content: |
                    1

                - path: /root/docker_hello.sh
                  content: |
                    #!/bin/bash
                    sleep 7m
                    cd /root
                    curl {{ node.public }}:8080/v2/apps \
                    -H 'Content-Type: application/json' \
                    --include \
                    -d @/root/docker_hello.json

                - path: /root/docker_hello.json
                  content: |
                    {
                      "id": "docker-hello",
                      "container": {
                        "docker": {
                          "image": "hello-world"
                        },
                        "type": "DOCKER",
                        "volumes": []
                      },
                      "cpus": 0.2,
                      "mem": 32.0,
                      "instances": 1
                    }

              runcmd:

                - echo "===== Submitting some activities to Marathon"
                - chmod +x /root/docker_hello.sh
                - /root/docker_hello.sh

        - master2:
            default: mesosphere-master

            cloud-config:

              write_files:

                - path: /etc/zookeeper/conf/myid
                  content: |
                    2

                - path: /root/shell_hello.sh
                  content: |
                    #!/bin/bash
                    sleep 7m
                    cd /root
                    curl {{ node.public }}:8080/v2/apps \
                    -H 'Content-Type: application/json' \
                    --include \
                    -d @/root/shell_hello.json

                - path: /root/shell_hello.json
                  content: |
                    {
                        "id": "shell-hello",
                        "cmd": "echo hello; sleep 10",
                        "mem": 16,
                        "cpus": 0.1,
                        "instances": 1,
                        "disk": 0.0,
                        "ports": [0]
                    }

              runcmd:

                - echo "===== Submitting some activities to Marathon"
                - chmod +x /root/shell_hello.sh
                - /root/shell_hello.sh

        - master3:
            default: mesosphere-master

            cloud-config:

              write_files:

                - path: /etc/zookeeper/conf/myid
                  content: |
                    3

  - slaves:

      nodes:
        - slave[1..9]:
            default: mesosphere-slave
